// Import required modules
const express = require("express");
const dotenv = require("dotenv");
const cors = require("cors");
const mysql = require("mysql2");
const bcrypt = require("bcrypt");
const path = require("path");
const session = require("express-session");

// Load environment variables
dotenv.config();

// Database connection setup
const db = mysql.createConnection({
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASS,
    database: process.env.DB_NAME,
});

// Connect to the database
db.connect((err) => {
    if (err) {
        console.error("Error connecting to the database:", err);
    } else {
        console.log("Connected to the MySQL database!");
    }
});

// Initialize the Express app
const app = express();
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(express.static(path.join(__dirname, "public"))); // Serve static files

// Add session middleware
app.use(
    session({
        secret: process.env.SESSION_SECRET || "secure_session_key",
        resave: false,
        saveUninitialized: true,
        cookie: {
            secure: false, // Set to false in development (for HTTP)
            httpOnly: true, // Ensures the cookie is not accessible from JavaScript
            sameSite: 'lax', // Allows the cookie to be sent with cross-origin requests
            maxAge: 1000 * 60 * 60 * 24, // Cookie expiration (24 hours)
        },
    })
);

// Middleware for authentication checks
const requireAuth = (req, res, next) => {
    if (!req.session.user) {
        return res.status(401).json({ error: "Not authenticated" });
    }
    next();
};

// Middleware for admin checks
const requireAdmin = (req, res, next) => {
    if (req.session.user && req.session.user.role === 'admin') {
        return next();
    }
    return res.status(403).json({ error: "Access denied. Admins only!" });
};
app.get("/register.html", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "register.html"));
});

// User Registration Route
app.post("/register", async (req, res) => {
    const { name, college, year, email, password, accommodation, role, admin_key } = req.body;

    // Ensure all required fields are provided
    if (!name || !college || !year || !email || !password || !accommodation || !role) {
        return res.status(400).json({ error: "All fields are required!" });
    }

    // Check if the role is either 'user' or 'admin'
    if (role !== "user" && role !== "admin") {
        return res.status(400).json({ error: "Invalid role! Choose either 'user' or 'admin'." });
    }

    try {
        // Hash the password before saving it
        const hashedPassword = await bcrypt.hash(password, 10);

        // If the role is 'admin', validate the admin key
        if (role === "admin" && admin_key !== process.env.ADMIN_KEY) {
            return res.status(400).json({ error: "Invalid admin key!" });
        }

        // Insert the new user into the database
        const query = `INSERT INTO users (name, college, year, email, password, accommodation, role) VALUES (?, ?, ?, ?, ?, ?, ?)`;
        db.query(query, [name, college, year, email, hashedPassword, accommodation, role], (err, result) => {
            if (err) {
                if (err.code === "ER_DUP_ENTRY") {
                    return res.status(400).json({ error: "Email already exists!" });
                }
                return res.status(500).json({ error: "Database error!", details: err });
            }

            // Send appropriate response for user or admin
            if (role === "user") {
                return res
                    .status(201)
                    .send(`
                        <script>
                            alert("User registered successfully!");
                            window.location.href = "/profile.html";
                        </script>
                    `);
            } else if (role === "admin") {
                return res
                    .status(201)
                    .send(`
                        <script>
                            alert("Admin registered successfully!");
                            window.location.href = "/adminprofile.html";
                        </script>
                    `);
            }
        });
    } catch (error) {
        res.status(500).json({ error: "Server error!" });
    }
});

// Endpoint to check authentication status
app.get("/check-authentication", (req, res) => {
    if (!req.session.user) {
        return res.json({ error: "Not authenticated" });
    }
    res.json({ message: "Authenticated" });
});


// User Login Route
// User Login Route
app.post("/login", async (req, res) => {
    const { email, password } = req.body;

    if (!email || !password) {
        return res.status(400).json({ error: "Email and password are required!" });
    }

    try {
        const query = `SELECT * FROM users WHERE email = ?`;
        db.query(query, [email], async (err, results) => {
            if (err) return res.status(500).json({ error: "Database error!" });
            if (results.length === 0) return res.status(404).json({ error: "User not found!" });

            const user = results[0];
            const isPasswordValid = await bcrypt.compare(password, user.password);

            if (!isPasswordValid) return res.status(401).json({ error: "Invalid credentials!" });

            // Save user information in session
            req.session.user = {
                id: user.id,
                name: user.name,
                email: user.email,
                role: user.role, // Role to differentiate admin and user
            };

            // Redirect based on user role
            if (user.role === "admin") {
                return res.redirect("/adminprofile.html"); // Redirect to admin profile
            } else {
                return res.redirect("/profile.html"); // Redirect to user profile
            }
        });
    } catch (error) {
        res.status(500).json({ error: "Server error!" });
    }
});

// Serve Profile Page
app.get("/profile", requireAuth, (req, res) => {
    // Check if user is authenticated via the session
    if (!req.session.user) {
        return res.redirect("/login.html"); // Redirect to login if not authenticated
    }
    res.sendFile(path.join(__dirname, "public", "profile.html"));
});

// Get Profile Route
app.get("/get-profile", requireAuth, (req, res) => {
    const userId = req.session.user.id;
    db.query(
        "SELECT name, college, year, accommodation,role FROM users WHERE id = ?",
        [userId],
        (err, results) => {
            if (err) return res.status(500).json({ error: "Database error!" });
            if (results.length === 0) return res.status(404).json({ error: "User not found!" });
            res.json(results[0]);
        }
    );
});

app.get('/get-admin-profile', requireAdmin, (req, res) => {
    const userId = req.session.user.id;
    db.query(
        "SELECT name, email, college FROM users WHERE id = ?",
        [userId],
        (err, results) => {
            if (err) {
                console.error("Database error:", err);
                return res.status(500).json({ error: "Database error!" });
            }
            if (results.length === 0) {
                return res.status(404).json({ error: "Admin not found!" });
            }
            res.json(results[0]); // Send profile data
        }
    );
});

// Get Admin Attendance Records
app.get('/admin/attendance', requireAdmin, (req, res) => {
    const userId = req.session.user.id;
    db.query(
        `SELECT events.name AS event_name, users.name AS participant_name, attendance.attendance_status, attendance.marked_at
        FROM attendance
        JOIN events ON attendance.event_id = events.id
        JOIN users ON attendance.user_id = users.id
        WHERE attendance.admin_id = ?`,
        [userId],
        (err, results) => {
            if (err) {
                console.error("Database error:", err);
                return res.status(500).json({ error: "Database error!" });
            }
            res.json(results); // Send attendance data
        }
    );
});

app.post("/event/register", requireAuth, (req, res) => {
    const { eventId } = req.body;
    const userId = req.session.user.id;

    if (!eventId) {
        return res.status(400).json({ error: "Event ID is required!" });
    }

    // Check if the event exists in the events table
    const checkEventQuery = "SELECT id FROM events WHERE id = ?";
    db.query(checkEventQuery, [eventId], (err, results) => {
        if (err) {
            return res.status(500).json({ error: "Database error when checking event!" });
        }
        if (results.length === 0) {
            return res.status(404).json({ error: "Event not found!" });
        }

        // Insert the registration into the registrations table
        const query = "INSERT INTO registrations (user_id, event_id) VALUES (?, ?)";
        db.query(query, [userId, eventId], (err, result) => {
            if (err) {
                if (err.code === "ER_DUP_ENTRY") {
                    return res.status(400).json({ error: "User already registered for this event!" });
                }
                return res.status(500).json({ error: "Database error!", details: err });
            }

            // Send success response
            res.status(201).json({ message: "Event registration successful!" });
        });
    });
});


// Update User Profile Route
app.post("/update-profile", requireAuth, (req, res) => {
    const { name, college, year, accommodation } = req.body;
    const userId = req.session.user.id;

    if (!name || !college || !year || !accommodation) {
        return res.status(400).json({ error: "All fields are required!" });
    }

    const query = `UPDATE users SET name = ?, college = ?, year = ?, accommodation = ? WHERE id = ?`;
    db.query(query, [name, college, year, accommodation, userId], (err, result) => {
        if (err) return res.status(500).json({ error: "Database error!" });
        if (result.affectedRows === 0) return res.status(404).json({ error: "User not found!" });

        req.session.user.name = name;
        res.status(200).json({ message: "Profile updated successfully!" });
    });
});

// Fetch Registered Events for a User
app.get("/user/events", requireAuth, (req, res) => {
    const userId = req.session.user.id;

    const query = `
        SELECT e.name AS eventName
        FROM events e
        INNER JOIN registrations r ON e.id = r.event_id
        WHERE r.user_id = ?
    `;

    db.query(query, [userId], (err, results) => {
        if (err) return res.status(500).json({ error: "Database error!", details: err });
        res.status(200).json(results);  // Send the event names to the frontend
    });
});
// Logout Route
app.get("/logout", (req, res) => {
    req.session.destroy((err) => {
        if (err) {
            return res.status(500).json({ error: "Failed to log out!" });
        }
        res.clearCookie("connect.sid"); // Clear the session cookie
        res.redirect("/"); // Redirect to the homepage or login page
    });
});

// Root Route
app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "public", "index.html"));
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});

module.exports = app;
